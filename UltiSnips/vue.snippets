# This snippet file enables vue files to use tabs for html, js and css. It also
# includes some vue-specific html-like snippets, as well as some general
# boilerplate code for vue.

extends html, javascript, css

# These snippets form a port of Sarah Drasner's vue-sublime-snippets

# some html-like snippets

snippet slot
	<slot></slot>
endsnippet

snippet template
	<template></template>
endsnippet

snippet transition
	<transition></transition>
endsnippet

# The following snippets create more complex boilerplate code.

snippet vbase
	<template>
		<div>

		</div>
	</template>

	<script>
		export default{
			${0}
		}
	</script>

	<style scoped>

	</style>
endsnippet

snippet vimport:c
	import ${1:Name} from './components/$1.vue';

	export default {
		components: {
			$1
		}
	}
endsnippet

snippet vactions
	actions: {
		${1:updateValue}({commit}, ${2:payload}) {
			commit($1, $2);
		}
	}
endsnippet

# Add in js animation hooks
snippet vanim:js:el
	<transition
	  @before-enter="beforeEnter"
	  @enter="enter"
	  @after-enter="afterEnter"
	  @enter-cancelled="enterCancelled"

	  @before-Leave="beforeLeave"
	  @leave="leave"
	  @after-leave="afterLeave"
	  @leave-cancelled="leaveCancelled"
	  :css="false">

	 </transition>
endsnippet

snippet vanim:js:method
	methods: {
		beforeEnter(el) {
			console.log('beforeEnter');
		},
		enter(el, done) {
			console.log('enter');
			done();
		},
		afterEnter(el) {
			console.log('afterEnter');
		},
		enterCancelled(el, done) {
			console.log('enterCancelled');
		},
		beforeLeave(el) {
			console.log('beforeLeave');
		},
		leave(el, done) {
			console.log('leave');
			done();
		},
		afterLeave(el) {
			console.log('afterLeave');
		},
		leaveCancelled(el, done) {
			console.log('leaveCancelled');
		}
	}
endsnippet

snippet vcl
	@click="${1}"
endsnippet

snippet vdata
	data() {
		return {
			${1:key}: ${2:value}
		};
	}
endsnippet

snippet vfilter
	filters: {
		${1:fnName}: function(${2:value}) {
			return;
		}
	}
endsnippet

snippet vfor
	<div v-for="${1:item} in ${2:items}" :key="$1.id">
		{{ $1 }}
	</div
endsnippet

snippet vgetters
	getters: {
		${1:value}: state => {
			return state.$1;
		}
	}
endsnippet

snippet vimport
	import ${1:New} from './components/$1.vue';
endsnippet

snippet vkeep
	<keep-alive>
		<component :is="">
			<p>default</p>
		</component>
	</keep-alive>
endsnippet

snippet vmixin
	const ${1:mixinName} = {
		mounted() {
			console.log('hello from mixin!')
		},
	}
	const ${2:Component} = Vue.extend({
		mixins: [$1]
	})
endsnippet

snippet vmutations
	mutations: {
		${1:updateValue}(state, ${3:payload}) => {
			state.${2:value} = $3;
		}
	}
endsnippet

snippet vprops:d
	${1:propName}: {
	  type: ${2:Number},
	  default: ${0}
	},
endsnippet

snippet vprops
	${1:propName}: {
		type: ${2:Number}
	},
endsnippet

snippet vstore
	import Vue from 'vue';
	import Vuex from 'vuex';

	Vue.use(Vuex);

	export const store = new Vuex.Store({
		state: {
			${1:key}: ${2:value}
		}
	});
endsnippet

snippet parent
<template>
  <Layout class="layout-2">
    <Sider :style="{background: '#fff'}" :collapsible="false">
      <div class="h20"></div>
      <Menu :active-name="this.$route.name"
            :collapsible="true"
            theme="light" width="auto"
            :open-names="['$1Menu']">
        <Submenu name="$1Menu">
          <template slot="title">
              <Icon type="md-filing" />
              $2
          </template>
          <MenuItem class="side-menu-item" name="$1List" :to="{ name: '$1List' }">
            <Icon type="md-list"/>
            <span>$2列表</span>
          </MenuItem>
          <MenuItem class="side-menu-item" name="$1Create" :to="{ name: '$1Create' }">
            <Icon type="md-add"/>
            <span>创建$2</span>
          </MenuItem>
        </Submenu>
      </Menu>
    </Sider>
    <Layout>
      <Content style="height: 100%">
        <!--<div class="m-10" style="height: 100%; background-color: #fff" >-->
           <router-view/>
        <!--</div>-->

      </Content>
    </Layout>
  </Layout>
</template>

<script>
export default {
  name: 'parent',
  data () {
    return {
    }
  },
  computed: {
  }
}
</script>

<style scoped>

</style>

endsnippet


snippet create
<template>
  <div class="p-20">
    <h2>创建$2</h2>
    <div class="h20"></div>
    <Form :label-width="180" :model="form" :rules="rules" ref="myForm">
      <h3 style="margin: 10px 20px">基本信息</h3>

      <FormItem label="$2名称：" prop="name">
        <Input class="width360" v-model="form.name" :disabled="readOnly" />
      </FormItem>

      <FormItem label="$2描述：" prop="description">
        <Input
          type="textarea"
          :rows="10"
          class="width360"
          v-model="form.description"
          :disabled="readOnly"
        />
      </FormItem>

      <FormItem label="上架日期：" prop="active_at">
        <DatePicker
          class="width360"
          type="date"
          placeholder="请选择上架日期"
          v-model="form.active_at"
          :disabled="readOnly"
        >
        </DatePicker>
      </FormItem>

      <FormItem>
        <Button
          @click="submitForm"
          :disabled="readOnly"
          type="primary"
          class="m-10 width120"
          >创建</Button
        >
      </FormItem>
    </Form>
  </div>
</template>

<script>
import {
  create$1Api,
} from '@/api/data'
import { handleOperationRes } from '../../libs/util'
import userInput from '@/components/my-forms/user-input'

export default {
  name: '$1ModelCreateForm',
  components: {
    userInput
  },
  data: function () {
    return {
      readOnly: false,
      loading: false,
      form: {
        name: '',
        description: '',
      },
      rules: {
        name: [{ required: true, message: '请输入$2名称', trigger: 'blur' }],
        description: [{ message: '请输入$2描述', trigger: 'blur' }],
      }
    }
  },
  methods: {
    submitForm () {
      this.$refs.myForm.validate(valid => {
        let self = this
        if (valid) {
          let data = {
            name: this.form.name.trim(),
            description: this.form.description
              ? this.form.description.trim()
              : null,
          }
          create$1Api(data)
            .then(res => {
              res = res.data
              if (res.meta.code === 0) {
                handleOperationRes(self, res, '/$1s/list')
                this.readOnly = false
              } else {
                this.$Message.warning('创建$2失败')
                this.readOnly = false
              }
            })
            .catch(err => {
              self.$Message.warning('创建$2失败')
              console.log(err)
              // handleBuildError(self, err, '创建$2失败')
              self.readOnly = false
            })
          this.readOnly = true
        } else {
          this.$Message.warning('请至少输入$2名称')
        }
      })
    }
  },
  mounted: function () {
  }
}
</script>

<style scoped></style>
endsnippet

snippet edit
<template>
  <div class="p-20">
    <h2>编辑$2</h2>
    <Divider></Divider>
    <div class="h20"></div>
    <Form :label-width="180" :model="form" :rules="rules" ref="myForm">
      <FormItem label="$2名称：" prop="name">
        <Input class="width320" v-model="form.name" :disabled="readOnly" />
      </FormItem>

      <FormItem>
        <Button
          @click="submitForm"
          :disabled="readOnly"
          type="primary"
          class="m-10 width120"
          >修改</Button
        >
      </FormItem>
    </Form>
  </div>
</template>

<script>
import { get$1Api, edit$1Api } from '@/api/data'
import { handleOperationRes } from '../../libs/util'
export default {
  name: '${1/\w+\s*/\l$0/g}EditForm',
  data: function () {
    return {
      readOnly: false,
      form: {
        name: ''
      },
      rules: {
        name: [{ required: true, message: '请输入$2名称', trigger: 'blur' }]
      },
      ${1/\w+\s*/\l$0/g}: null
    }
  },
  computed: {
    ${1/\w+\s*/$0/g}Id () {
      return parseInt(this.$route.params.${1/\w+\s*/\l$0/g}_id)
    }
  },
  methods: {
    get${1/\w+\s*/$0/g} () {
      get${1/\w+\s*/$0/g}Api(this.${1/\w+\s*/$0/g}Id).then(res => {
        res = res.data
        handleOperationRes(this, res, false, null)
        if (res.meta.code === 0) {
          this.${1/\w+\s*/\l$0/g} = res.data.${1/\w+\s*/\l$0/g}
        }
      })
    },
    submitForm () {
      this.$refs.myForm.validate(valid => {
        if (valid) {
          let data = {
            name: this.form.name.trim(),
            description: this.form.description.trim()
          }
          edit${1/\w+\s*/$0/g}Api(this.${1/\w+\s*/\l$0/g}Id, data)
            .then(res => {
              res = res.data
              if (res.meta.code === 0) {
                this.readOnly = true
              }
              handleOperationRes(this, res, null)
              this.$router.go(-1)
            })
            .catch(err => {
              handleBuildError(this, err, '创建失败')
              this.readOnly = false
            })
        } else {
          this.$Message.warning('请输入正确的信息')
        }
      })
    }
  },
  mounted () {
    this.get${1/\w+\s*/$0/g}()
  }
}
</script>

<style scoped></style>

endsnippet

snippet view
<template>
  <div class="p-20">
    <h2>查看$2</h2>
    <Divider></Divider>
    <Table
      size="small"
      class="m-20"
      :data="summary"
      :loading="loading"
      border
      :columns="columns"
    >
    </Table>
  </div>
</template>

<script>
import { get$1Api } from '@/api/data'
import { handleOperationRes } from '../../libs/util'
export default {
  name: '${1/\w+\s*/\l$0/g}View',
  data: function () {
    return {
      loading: false,
      form: {
        name: ''
      },
      rules: {
        name: [{ required: true, message: '请输入$2名称', trigger: 'blur' }]
      },
      columns: [
        {
          title: '项目',
          key: 'item',
          render: (h, params) => {
            return h('strong', {}, params.row.item)
          }
        },
        {
          title: '值',
          key: 'value',
          render: (h, params) => {
            if (typeof params.row.value === 'object') {
              if (params.row.value.link) {
                return h(
                  'a',
                  {
                    attrs: {
                      target: '_blank',
                      href: params.row.value.link
                    }
                  },
                  params.row.value.text
                )
              } else {
                return h(
                  'strong',
                  {
                    class: params.row.value.class,
                    style: params.row.value.style
                  },
                  params.row.value.text
                )
              }
            } else {
              return h('span', {}, params.row.value)
            }
          }
        }
      ],
      ${1/\w+\s*/\l$0/g}: null
    }
  },
  computed: {
    ${1/\w+\s*/\l$0/g}Id () {
      return parseInt(this.$route.params.${1/\w+\s*/\l$0/g}_id)
    },
    summary () {
      if (!this.${1/\w+\s*/\l$0/g}) {
        return []
      }

      return [
        {
          item: '$2名称',
          value: this.${1/\w+\s*/\l$0/g}.name
        }
      ]
    }
  },
  methods: {
    get$1 () {
      get$1Api(this.${1/\w+\s*/\l$0/g}Id).then(res => {
        this.loading = false
        res = res.data
        handleOperationRes(this, res, false, null)
        if (res.meta.code === 0) {
          this.${1/\w+\s*/\l$0/g} = res.data.${1/\w+\s*/\l$0/g}
        }
      })
      this.loading = true
    }
  },
  mounted () {
    this.get$1()
  }
}
</script>

<style scoped></style>

endsnippet


snippet ttlist
<template>
  <div class="p-20">
    <h2>$2列表</h2>
    <Divider></Divider>

    <Row>
      <Form
        ref="form"
        :model="form"
        :rules="ruleForm"
        label-position="right"
        :label-width="80"
        inline
      >
        <Row>
          <FormItem prop="status" label="状态">
            <CheckboxGroup size="large" v-model="form.status" class="m-l-30">
              <Checkbox
                v-for="item in checkStatus"
                :item="item"
                :key="item.label"
                :label="item.label"
                >{{ item.value }}
              </Checkbox>
            </CheckboxGroup>
          </FormItem>
        </Row>
        <Row>
          <FormItem prop="period" label="筛选">
            <strong class="m-l-30">日期</strong>
            <Select v-model="period" class="width100" style="margin-left:10px">
              <Option
                v-for="(item, index) in periodList"
                :value="item.value"
                :key="index"
                >{{ item.label }}</Option
              >
            </Select>
            <span style="margin-left: 10px" v-if="period !== 'custom'"
              >{{ getDateString(form.created_after) }} 至
              {{ getDateString(form.created_before) }}</span
            >
            <div
              style="display:inline-block;margin-left: 10px"
              v-if="period === 'custom'"
            >
              <DatePicker
                type="date"
                placeholder="开始日期"
                v-model="form.created_after"
                class="width120"
              >
              </DatePicker>
              至
              <DatePicker
                type="date"
                placeholder="截止日期"
                v-model="form.created_before"
                class="width120"
              >
              </DatePicker>
            </div>
          </FormItem>

          <FormItem prop="search" label="关键词">
            <Input
              clearable
              lazy
              search
              style="margin-left:10px;width:200px"
              v-model="form.search"
              placeholder=""
            />
          </FormItem>
          <Button type="error" style="margin-left:30px" @click="clearSearch"
            >清空</Button
          >
        </Row>
      </Form>
    </Row>
    <Row>
      <Page
        class="m-20"
        :total="form.total"
        @on-change="onPageNumChange"
        show-total
        :current="form.currentPageNum"
        :page-size="form.pageSize"
      />
      <Table
        class="m-20"
        size="small"
        :data="${1/\w+\s*/\l$0/g}s"
        :loading="loading"
        border
        :columns="${1/\w+\s*/\l$0/g}Columns"
      >
      </Table>
      <Page
        class="m-20"
        :total="form.total"
        @on-change="onPageNumChange"
        show-total
        :current="form.currentPageNum"
        :page-size="form.pageSize"
      />
      <Row class="text-center" v-if="!form.total && !loading">
        <p>没有找到资源。</p>
        <br />
        <Button type="primary" @click="clearSearch">清除搜索条件</Button>
      </Row>
    </Row>
  </div>
</template>

<script>
import { handleOperationRes, getDateString } from '../../libs/util'
import { get$1sApi } from '@/api/data'
import moment from 'moment'
export default {
  name: '${1/\w+\s*/\l$0/g}List',
  data: function () {
    return {
      checkStatus: [
        { label: 'draft', value: '待提交' },
        { label: 'submitted', value: '已提交' },
        { label: 'recalled', value: '已撤销' },
        { label: 'finished', value: '合同已签署' }
      ],
      period: '1m',
      periodList: [
        {
          value: '1m',
          label: '本月'
        },
        {
          value: '3m',
          label: '本季度'
        },
        {
          value: '1y',
          label: '本年'
        },
        {
          value: 'custom',
          label: '自定义'
        }
      ],
      requestStatusMap: {
        draft: '进行中',
        submitted: '进行中',
        recalled: '已撤销',
        finished: '合同已签署'
      },
      form: {
        status: ['draft,submitted', 'finished', 'recalled'],

        search: null,
        created_after: null,
        created_before: null,
        currentPageNum: 1,
        pageSize: 20,
        total: 0
      },
      loading: true,
      ruleForm: {
        status: [
          {
            required: true,
            type: 'array',
            min: 1,
            message: '请至少选中一个状态',
            trigger: 'blur'
          }
        ]
      },

      ${1/\w+\s*/\l$0/g}s: []
    }
  },
  computed: {
    ${1/\w+\s*/\l$0/g}Columns () {
      let result = [
        {
          title: '采购名称',
          key: 'title'
        },
        {
          title: '创建人',
          key: 'creator',
          render: (h, params) => {
            let name = params.row.creator ? params.row.creator.name : 'N/A'
            return h('span', {}, name)
          }
        },
        {
          title: '创建时间',
          key: 'created_at',
          render: (h, params) => {
            return h('span', {}, getDateString(params.row.created_at))
          }
        },
        {
          title: '操作',
          key: 'op',

          render: (h, params) => {
            return h('span', [
              h(
                'router-link',
                {
                  props: {
                    to: {
                      name: '${1/\w+\s*/\l$0/g}Edit',
                      params: { ${1/\w+\s*/\l$0/g}_id: params.row.id }
                    }
                  }
                },
                [
                  h(
                    'Button',
                    {
                      style: {
                        margin: '4px'
                      },
                      props: {
                        type: 'primary',
                        size: 'small'
                      }
                    },
                    '编辑'
                  )
                ]
              ),
              h(
                'router-link',
                {
                  props: {
                    to: {
                      name: '${1/\w+\s*/\l$0/g}View',
                      params: { ${1/\w+\s*/\l$0/g}_id: params.row.id }
                    }
                  }
                },
                [
                  h(
                    'Button',
                    {
                      style: {
                        margin: '4px'
                      },
                      props: {
                        type: 'success',
                        size: 'small'
                      }
                    },
                    '查看'
                  )
                ]
              )
            ])
          }
        }
      ]
      return result
    },
    route () {
      return this.$route
    }
  },
  methods: {
    setDate () {
      switch (this.period) {
        case '1m':
          this.form.created_after = moment()
            .date(1)
            .toDate()
          this.form.created_before = new Date()
          break
        case '3m':
          let month = moment().month()
          this.form.created_after = moment()
            .date(1)
            .add(-month % 3, 'months')
            .toDate()
          this.form.created_before = new Date()
          break
        case '1y':
          this.form.created_after = moment()
            .month(0)
            .date(1)
            .toDate()
          this.form.created_before = new Date()
          break
        case 'custom':
          this.form.created_after = this.form.created_after
          this.form.created_before = this.form.created_before
          break
      }
    },
    getDateString (date, format) {
      return getDateString(date, format)
    },
    clearSearch () {
      this.form = {
        status: ['draft,submitted', 'finished', 'recalled'],

        currentPageNum: this.form.currentPageNum,
        pageSize: this.form.pageSize,
        total: this.form.total,
        loading: this.loading
      }
      this.period = '1m'
      this.setDate()
    },
    updateRoute () {
      this.$router.push({
        path: 'list',
        query: {
          request_status: this.form.status.length
            ? this.form.status.join(',')
            : null,
          search: this.form.search ? this.form.search : null,
          start_at: this.form.created_after
            ? this.form.created_after.getTime()
            : null,
          created_before: this.form.created_before ? this.form.created_before.getTime() : null,
          page_num: this.form.currentPageNum ? this.form.currentPageNum : null,
          page_size: this.form.pageSize ? this.form.pageSize : null
        }
      })
    },
    handleSubmit (name) {
      this.$refs[name].validate(valid => {
        if (valid) {
          this.updateRoute()
        } else {
          this.$Message.error('Fail!')
        }
      })
    },
    get$1List (query) {
      this.loading = true
      get$1sApi(query).then(res => {
        res = res.data
        if (res.meta.code === 0) {
          this.${1/\w+\s*/\l$0/g}s = res.data.rows
          this.form.total = res.data.total
        }
        this.loading = false
        handleOperationRes(this, res, false, null)
      })
    },
    onPageNumChange: function (currentPage) {
      this.form.currentPageNum = currentPage
    }
  },
  watch: {
    form: {
      handler (val) {
        this.handleSubmit('form')
      },
      deep: true
    },
    period: {
      handler (val) {
        this.setDate()
      }
    },
    route: {
      handler (val) {
        this.get$1List(this.$route.query)
      },
      deep: true
    }
  },
  created: function () {
    this.setDate()
  }
}
</script>

<style scoped></style>
endsnippet
