# This snippet file enables vue files to use tabs for html, js and css. It also
# includes some vue-specific html-like snippets, as well as some general
# boilerplate code for vue.

extends html, javascript, css

# These snippets form a port of Sarah Drasner's vue-sublime-snippets

# some html-like snippets

snippet slot
	<slot></slot>
endsnippet

snippet template
	<template></template>
endsnippet

snippet transition
	<transition></transition>
endsnippet

# The following snippets create more complex boilerplate code.

snippet vbase
	<template>
		<div>

		</div>
	</template>

	<script>
		export default{
			${0}
		}
	</script>

	<style scoped>

	</style>
endsnippet

snippet vimport:c
	import ${1:Name} from './components/$1.vue';

	export default {
		components: {
			$1
		}
	}
endsnippet

snippet vactions
	actions: {
		${1:updateValue}({commit}, ${2:payload}) {
			commit($1, $2);
		}
	}
endsnippet

# Add in js animation hooks
snippet vanim:js:el
	<transition
	  @before-enter="beforeEnter"
	  @enter="enter"
	  @after-enter="afterEnter"
	  @enter-cancelled="enterCancelled"

	  @before-Leave="beforeLeave"
	  @leave="leave"
	  @after-leave="afterLeave"
	  @leave-cancelled="leaveCancelled"
	  :css="false">

	 </transition>
endsnippet

snippet vanim:js:method
	methods: {
		beforeEnter(el) {
			console.log('beforeEnter');
		},
		enter(el, done) {
			console.log('enter');
			done();
		},
		afterEnter(el) {
			console.log('afterEnter');
		},
		enterCancelled(el, done) {
			console.log('enterCancelled');
		},
		beforeLeave(el) {
			console.log('beforeLeave');
		},
		leave(el, done) {
			console.log('leave');
			done();
		},
		afterLeave(el) {
			console.log('afterLeave');
		},
		leaveCancelled(el, done) {
			console.log('leaveCancelled');
		}
	}
endsnippet

snippet vcl
	@click="${1}"
endsnippet

snippet vdata
	data() {
		return {
			${1:key}: ${2:value}
		};
	}
endsnippet

snippet vfilter
	filters: {
		${1:fnName}: function(${2:value}) {
			return;
		}
	}
endsnippet

snippet vfor
	<div v-for="${1:item} in ${2:items}" :key="$1.id">
		{{ $1 }}
	</div
endsnippet

snippet vgetters
	getters: {
		${1:value}: state => {
			return state.$1;
		}
	}
endsnippet

snippet vimport
	import ${1:New} from './components/$1.vue';
endsnippet

snippet vkeep
	<keep-alive>
		<component :is="">
			<p>default</p>
		</component>
	</keep-alive>
endsnippet

snippet vmixin
	const ${1:mixinName} = {
		mounted() {
			console.log('hello from mixin!')
		},
	}
	const ${2:Component} = Vue.extend({
		mixins: [$1]
	})
endsnippet

snippet vmutations
	mutations: {
		${1:updateValue}(state, ${3:payload}) => {
			state.${2:value} = $3;
		}
	}
endsnippet

snippet vprops:d
	${1:propName}: {
	  type: ${2:Number},
	  default: ${0}
	},
endsnippet

snippet vprops
	${1:propName}: {
		type: ${2:Number}
	},
endsnippet

snippet vstore
	import Vue from 'vue';
	import Vuex from 'vuex';

	Vue.use(Vuex);

	export const store = new Vuex.Store({
		state: {
			${1:key}: ${2:value}
		}
	});
endsnippet


snippet tttable
  <template>
    <div>
      <Page
        class="m-20"
        :total="total"
        @on-change="onPageNumChange"
        show-total
        :current="currentPageNum"
        :page-size="pageSize"
      />
      <Table
        class="m-20"
        size="small"
        :data="$1Data"
        :loading="loading"
        border
        :columns="${1/\w+\s*/\$0/g}Columns"
      >
      </Table>
      <Page
        class="m-20"
        :total="total"
        @on-change="onPageNumChange"
        show-total
        :current="currentPageNum"
        :page-size="pageSize"
      />
    </div>
  </template>

  <script>
  import {get${1/\w+\s*/\u$0/g}Api} from '@/api/data'
import { handleOperationRes } from '../../libs/util'
    export default{
  data() {
    return {
        total:0,
        currentPageNum:1,
        pageSize:20,
        loading:false,
        ${1/\w+\s*/\$0/g}Data:[],
        search:null
    };
    },
    computed:{
        ${1/\w+\s*/\$0/g}Columns(){
            return [
        { title: 'Name', key: 'name', sortable: true },
        { title: 'Email', key: 'email', editable: true },
        { title: 'Create-Time', key: 'createTime' },
        {
          title: 'Handle',
          key: 'handle',
          options: ['delete'],
          button: [
            (h, params, vm) => {
              return h(
                'Poptip',
                {
                  props: {
                    confirm: true,
                    title: '你确定要删除吗?'
                  },
                  on: {
                    'on-ok': () => {
                      vm.$emit('on-delete', params)
                      vm.$emit(
                        'input',
                        params.tableData.filter(
                          (item, index) => index !== params.row.initRowIndex
                        )
                      )
                    }
                  }
                },
                [h('Button', '自定义删除')]
              )
            }
          ]
        }
      ]
            }
        },
    methods:{
        handleSearch(){
            this.search= {
                page_num:1,
                page_size:20
                }
        },
        init${1/\w+\s*/\$0/g}(search){
            if(!search){
                return
                }
          this.loading = true
          get${1/\w+\s*/\u$0/g}Api(search).then(res => {
            res = res.data
            if (res.meta.code === 0) {
              this.${1/\w+\s*/\$0/g}Data= res.data.rows
              this.total = res.data.total
            }
            this.loading = false
            handleOperationRes(this, res, false, null)
          })
        },
        onPageNumChange: function (currentPage) {
          this.currentPageNum = currentPage
        }
    },
    watch:{
        search:{
            handler(val){
                }
            }
        },
    created(){
        this.handleSearch()
        this.init${1/\w+\s*/\$0/g}(this.search)
    }
  }
  </script>

  <style scoped>

  </style>
endsnippet
